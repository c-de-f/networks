<html>
    <head>
        <title>Задача построения расписания</title>
    </head>
    <body>
        <h1>Задача построения расписания</h1>
        <p> 
        <a href = "#" style = "color : blue; text-decoration : underline" onclick = "displayControl('debugger'); return false">Подключиться к серверу</a>
        <a href = "#" style = "color : blue; text-decoration : underline" onclick = "displayControl('welcome'); return false">Помощь</a>
        <a href = "#" style = "color : blue; text-decoration : underline" onclick = "displayControl('numbers'); return false">Ввести данные таблицей</a>
        <a href = "#" style = "color : blue; text-decoration : underline" onclick = "displayControl('inputText'); return false">Ввести данные текстом</a>
       <!-- <a href = "#" style = "color : blue; text-decoration : underline" onclick = "displayControl('fileinput'); return false">Ввести данные файлом</a> -->
        </p>
        <div id = "debugger" style = "display : none">
        <p>
            <button onClick="initWebSocket();">Connect</button>
            <button onClick="stopWebSocket();">Disconnect</button>
            <button onClick="checkSocket();">State</button>
        </p>
        <p>
            <textarea id="debugTextArea" style="width:400px;height:200px;"></textarea>
        </p>
        </div>
        <div id = "welcome" style = "display : block"> 
        <h1>Постановка задачи</h1>
<p>На вход алгоритму подается набор n заданий, для которых требуется оставить расписание. На задания наложено два вида ограничений. Во-первых, ограничение предшествования типа «финиш-старт»: задание j не может начать выполняться, пока не закончат выполняться все его непосредственные предшественники. Во-вторых, задания выполняются на ресурсах, количество которых ограничено.</p>
<p>Пусть дано K типов ресурсов. Для выполнения задания j требуется r<sub>j,k</sub> единиц ресурса типа k в единицу времени, задание обрабатывается p<sub>j</sub> единиц времени. Всего в каждый момент времени доступно R<sub>k</sub> единиц ресурса k. Цель задачи – с учетом ограничений предшествования и ресурсных ограничений составить расписание, при котором все задания были бы выполнены за наименьший период времени.</p>
<br>

<h1>Формат входных данных</h1>
<p>Наиболее прост в использовании следующий формат ввода:</p><b><i><br>
PROBLEM название
<br><br>
TASKS<br>
название_задачи[0] продолжительность[0]<br>
...<br>
название_задачи[число_задач - 1] продолжительность[число_задач - 1]<br>
END_TASKS
<br><br>
LINKS<br>
задача_предшественник задача_преемник<br>
...<br>
END_LINKS
<br><br>
RESOURCES<br>
название_ресурса[0] мощность_ресурса[0]<br>
...<br>
название_ресурса[число_ресурсов - 1] мощность_ресурса[число_ресурсов - 1]<br>
END_RESOURCES
<br><br>
ASSIGNMENTS<br>
название_ресурса название_задачи число_единиц<br>
END_ASSIGNMENTS
<br><br>
END_PROBLEM
</i></b>
        </div>

        <p id="inputText" style = "display : none">
        <textarea id="inputText1" style="width:400px;height:200px;"></textarea>
            <button onClick="sendMessage();" >Отправить</button>
        </p>

         <div id = "numbers" style = "display:none">

        <p style = "display:none">
        <button onClick = "document.getElementById('patterson').style.display = 'block';document.getElementById('simple_parser').style.display = 'none';">Парсер Паттерсона</button> 
        <button onClick = "document.getElementById('patterson').style.display = 'none';document.getElementById('simple_parser').style.display = 'block';">Парсер попроще</button> </p>

        <div id = "simple_parser" > 
                <p>Название проекта: <input type = "text" id = "problem_name"/> </p>
                <div>
                <p> Введите названия и продолжительность задач:</p>
                <div id = "tasks"> 
                </div>
                <button onClick = "addTask();">Больше задач</button>
                </div>

                <div>
                <p> Введите задачу-предшественник и задачу-преемник:</p>
                <div id = "links"> 
                </div>
                <button onClick = "addLink();">Больше связей</button>
                </div>

                <div>
                <p>Введите название ресурса и его мощность:</p>
                <div id = "srcs"> 
                </div>
                <button onClick = "addSrc();">Больше ресурсов</button>
                </div>

                <div>
                <p>Введите имя ресурса, имя задачи и число единиц:</p>
                <div id = "asses"> 
                </div>
                <button onClick = "addAss();">Больше потребления</button>
                </div>


                <button onClick="sendSimple()">Отправить!</button>           


        </div>


        <!--<div id = "patterson" style = "display:none">
         Число задач: <input type = "text" id = "tasks_num"/> Число ресурсов: <input type = "text" id = "src_num"/>
        <button onClick="generateButtons();">Больше полей</button>
         
         <div id = "morenumbers"></div>
         </div>
         </div> -->

      <!--  <form name = "fileinput" id = "fileinput" style = "display:none" > 
        <input type = "file" id = "inputFile"/>
        <button onClick = "sendFile()">Send file</button>
        </form> -->
        
        <div id = "results" style = "display : none"> 
        <textarea id = "res" style = "width:400px;height:200px;"></textarea>
        </div>

        <script type="text/javascript">

            function addTask()
            {
                    cnt = 0;
                    while (document.getElementById("_task" + String(cnt))) {cnt++;}
                    document.getElementById("tasks").innerHTML += "<p><input type = 'text' id = \"_task" + String(cnt) + "\"></input>" + "<input type = 'text' id = \"_task_dur" + String(cnt) + "\"></input></p>";
            }

            function addLink()
            {
                    cnt = 0;
                    while (document.getElementById("_1link" + String(cnt))) {cnt++;}
                    document.getElementById("links").innerHTML += "<p><input type = 'text' id = '_1link" + String(cnt) + "'/>" + "<input type = 'text' id = '_2link" + String(cnt) + "'/></p>";
            }

            function addSrc()
            {
                    cnt = 0;
                    while (document.getElementById("_src" + String(cnt))) {cnt++;}
                    document.getElementById("srcs").innerHTML += "<p><input type = 'text' id = '_src" + String(cnt) + "'/>" + "<input type = 'text' id = '_src_cap" + String(cnt) + "'/></p>";
            }

            function addAss()
            {
                    cnt = 0;
                    while (document.getElementById("_ass" + String(cnt))) {cnt++;}
                    document.getElementById("asses").innerHTML += "<p><input type = 'text' id = '_ass" + String(cnt) + "'/>" +
                    "<input type = 'text' id = '_ass_tsk" + String(cnt) + "'/>" +
                    "<input type = 'text' id = '_ass_qua" + String(cnt) + "'/></p>";
            }


            function sendSimple()
            {
                var message = "";
                message += "PROBLEM " + document.getElementById("problem_name").value + "\n\nTASKS\n";
                cnt = 0; //TASKS
                while (document.getElementById("_task" + String(cnt))) 
                    {

                        message += document.getElementById("_task" + String(cnt)).value + ' ' +
                            document.getElementById("_task_dur" + String(cnt)).value + '\n';

                        cnt++;
                    }
                message += "END_TASKS\n\nLINKS\n";
                cnt = 0; //TASKS
                while (document.getElementById("_1link" + String(cnt))) 
                    {

                        message += document.getElementById("_1link" + String(cnt)).value + ' ' +
                            document.getElementById("_2link" + String(cnt)).value + '\n';

                        cnt++;
                    }
                message += "END_LINKS\n\nRESOURCES\n";
                cnt = 0; //TASKS
                while (document.getElementById("_src" + String(cnt))) 
                    {

                        message += document.getElementById("_src" + String(cnt)).value + ' ' +
                            document.getElementById("_src_cap" + String(cnt)).value + '\n';

                        cnt++;
                    }
                message += "END_RESOURCES\n\nASSIGNMENTS\n";
                cnt = 0;
                while (document.getElementById("_ass" + String(cnt))) 
                    {
                        //alert(cnt);
                        message += document.getElementById("_ass" + String(cnt)).value + ' ' +
                            document.getElementById("_ass_tsk" + String(cnt)).value + ' ' +
                            document.getElementById("_ass_qua" + String(cnt)).value +'\n';

                        cnt++;
                    }
                message += "END_ASSIGNMENTS\n\nEND_PROBLEM\n";
                console.log(message);
                if ( websocket != null ) websocket.send( message );
            }

            var debugTextArea = document.getElementById("debugTextArea");

            
            function generateButtons()
            {
                t_num = document.getElementById("tasks_num").value;
                res_num = document.getElementById("src_num").value;
                a = Number(res_num);
                //alert(t_num + ' ' + res_num);
                contents = "<p>Мощность ресурсов:</p><div>";
                for (var i = 0; i < a; i++) 
                    {
                        contents += "<input type = \"text\" id = \"src"+String(i)+"\"/>"; 
                    }
                contents +="</div><table><tr><th>-</th><th>Длительность:</th>";
                for (var i = 0; i < a; i++) {
                    contents += "<th>Потребление ресурса " +String(i) + "</th>";
                }
                contents += "<th>Число преемников</th><th>Преемники через пробел</th></tr>";
                cell_num = Number(3) + Number(res_num);
                //alert(cell_num);
                for (var i = 0; i < Number(t_num); i++) 
                {
                    contents += "<tr><th>Задача " + String(i) + "</th>";
                    for (var j = 0; j < cell_num; j++) {contents += "<td><input type = \"text\" id = \"task_ind"+String(i)+ ' ' + String(j) + "\"/></td>";}
                    contents +="</tr>";
                }
                contents += "</table><button onClick = \"collectMsg();\">Отправить</button>"
                //alert(contents);
               // alert("here");
                //document.getElementById("numbers").innerHTML -= "<button onClick=\"generateButtons(tsknum, srcnum);\">Больше полей</button>"
                document.getElementById("morenumbers").innerHTML = contents;
            }

            function collectMsg()
            {
                t_num = document.getElementById("tasks_num").value;
                res_num = document.getElementById("src_num").value;
                var message = t_num + ' ' + res_num + '\n';
               // debug(message);
                for (i = 0; i < Number(res_num); i++) message += document.getElementById("src" + String(i)).value + ' ';
                message = message + '\n';
                //debug(message);
                cell_num = Number(3) + Number(res_num);
                //alert(cell_num);
                for (i = 0; i < Number(t_num); i++)
                    {for (j = 0; j < cell_num; j++)
                        {
                        d = document.getElementById("task_ind" + String(i) + ' ' + String(j)).value;
                        //alert(d);
                        message +=  d + ' ';
                       /* if (d == '') 
                        {
                            alert("here");
                            message += "0 ";
                        }*/
                   
                  //  debug(message);
                        }
                         message = message + '\n';
                    }
               // alert(message);
                if ( websocket != null ) websocket.send( message );
               // alert("Sent");
            }

            function sendFile()
            {
               // debug("Whatever");
                 var fl = document.forms['fileinput']['inputFile'].files[0];
               // debug("Whatever");
                websocket.binaryData = "blob";
                if ( websocket != null )
                {
                //    debug("Whatever");
                     //debug("1");
                    websocket.send(fl);
               //     debug("Whatever");
                  // debug(fl.name);
                    console.log("file sent");
                }
            }



            function debug(message) {
                debugTextArea.value += message + "\n";
                debugTextArea.scrollTop = debugTextArea.scrollHeight;
            }

            function sendMessage() {
                var msg = document.getElementById("inputText1").value;
              //  alert(msg);
                if ( websocket != null )
                {
                   // document.getElementById("inputText").value = "";
                 //   debug("1");
                    websocket.send( msg );
               //    debug("2");
                    console.log( "string sent :", '"'+msg+'"' );
                }
            }

            var wsUri = "ws://localhost:1234";
            var websocket = null;

            function initWebSocket() {
                try {
                    if (typeof MozWebSocket == 'function')
                        WebSocket = MozWebSocket;
                    if ( websocket && websocket.readyState == 1 )
                        websocket.close();
                    websocket = new WebSocket( wsUri );
                    websocket.onopen = function (evt) {
                        debug("CONNECTED");
                    };
                    websocket.onclose = function (evt) {
                        debug("DISCONNECTED");
                    };
                    websocket.onmessage = function (evt) {
                     
                        console.log( "Message received :", evt.data );
                        debug( evt.data );
                        document.getElementById("res").innerHTML = evt.data;
                        document.getElementById("results").style.display = "block";
                    };
                    websocket.onerror = function (evt) {
                        debug('ERROR: ' + evt.data);
                    };
                } catch (exception) {
                    debug('ERROR: ' + exception);
                }
            }

            function stopWebSocket() {
                if (websocket)
                    websocket.close();
            }

            function checkSocket() {
                if (websocket != null) {
                    var stateStr;
                    switch (websocket.readyState) {
                        case 0: {
                            stateStr = "CONNECTING";
                            break;
                        }
                        case 1: {
                            stateStr = "OPEN";
                            break;
                        }
                        case 2: {
                            stateStr = "CLOSING";
                            break;
                        }
                        case 3: {
                            stateStr = "CLOSED";
                            break;
                        }
                        default: {
                            stateStr = "UNKNOWN";
                            break;
                        }
                    }
                    debug("WebSocket state = " + websocket.readyState + " ( " + stateStr + " )");
                } else {
                    debug("WebSocket is null");
                }
            }


         /*   function sendFile() {
                
                var fl = document.forms['fileinput']['inputFile'].files[0];
                websocket.binaryData = "blob";
                //ws.send('filename:'+file.name);
                var reader = new FileReader();
                var rawData = new ArrayBuffer();           
                console.log(fl.name);
                reader.loadend = function() {
                }
                reader.onload = function(e) {
                    rawData = e.target.result;
                    ws.send(rawData);
                    console.log("the File has been transferred.")
                    //ws.send('end');
                }
                reader.readAsArrayBuffer(fl);
            } */

            function displayControl(id)
            {
                var array = ["numbers", "inputText", /*"fileinput",*/ "debugger", "welcome"];
                if (document.getElementById(id).style.display == "none") 
                    {
                        for (i = 0; i < 4; i++)
                        {
                           // alert(array[i]);
                            if (array[i] != id) {document.getElementById(array[i]).style.display = "none";}
                           // alert(array[i]);
                        }
                        document.getElementById(id).style.display = "block";

                    }
                //else document.getElementById(id).style.display = "none";
                
               
            }
        </script>
    </body>
</html>